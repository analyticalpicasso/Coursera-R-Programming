dfOut <- t(dfOut)
row.names(dfOut)=NULL
dfOutTS<-ts(dfOut,frequency = 25)
dfOut<-decompose(dfOutTS)
dfOutTS<-ts(dfOut,frequency = 7)
dfOut<-decompose(dfOutTS)
plot(dfOut)
dfOutTS<-ts(dfOut,frequency = 25)
plot(dfOut)
plot(dfOutTS)
sqldf("select City_ID, min(Sum) from data")
min(colSums(df[,-1], na.rm="TRUE"))
max(colSums(df[,-1], na.rm="TRUE"))
colSums(df[,-1], na.rm="TRUE")
mynumbers <- c(3, 5, 6, 7, 1)
seq(0.5, 2.5, 0.5)
seq(0.5, 2.5, length = 100)
mynumbers <- 1:12
matrix(mynumbers, nrow = 4)
matrix(mynumbers, nrow = 4, byrow = TRUE)
mynumbers1 <- 1:4
mynumbers2 <- 11:14
cbind(mynumbers1, mynumbers2)
rbind(mynumbers1, mynumbers2)
vector1 <- seq(-3, 3, 0.5)
matrix1 <- matrix(1:20, nrow = 5)
matrix1
vector1
vector1[5]
vector1[1:3]
vector1[c(2, 4, 5)]
vector1[-5]
x <- seq(-pi, pi, length = 10)
y <- sin(x)
plot(x, y)
lines(x, y)
x <- seq(-pi, pi, length = 1000)
plot(x, y)
x <- seq(-pi, pi, length = 1000)
y <- sin(x)
plot(x, y)
lines(x, y)
plot(x, y, type=1)
plot(x, y, type="1")
x <- seq(-pi, pi, length = 1000)
y <- sin(x)
plot(x, y, type="1")
lines(x, y)
plot(x, y)
rnorm(10)
plot(rnorm(10))
lines(rnorm(10))
plot(lines(rnorm(10))
)
pnorm(0)
qnorm(0.5)
mysample <- rnorm(50)
hist(mysample, prob = TRUE)
mu <- mean(mysample)
sigma <- sd(mysample)
x <- 0:50
y <- dbinom(x, 50, 0.25)
plot(x, y, type="h")
x2 <- seq(0, 50, length = 500)
y2 <- dnorm(x2, 50*0.25,
sqrt(50*0.25*(1-0.25)))
lines(x2, y2, col = "red")
install.packages("extremevalues")
setwd("C:\\Users\\Sonam\\Documents")
MetDataset <- read.csv("Met_Micro.csv")
y <- rnorm(100)
evGui(y)
library(extremevalues)
evGui(y)
library("extremevalues")
evGui(y)
y <- rlnorm(100)
y <- c(0.1*min(y),y,10*max(y))
K <- getOutliers(y,method="I",distribution="lognormal")
L <- getOutliers(y,method="II",distribution="lognormal")
L <- getOutliers(y,method="II",distribution="lognormal")
par(mfrow=c(1,2))
outlierPlot(y,K,mode="qq")
outlierPlot(y,L,mode="residual")
x <-seq(-0.99,0.99,0.01);
plot(x,invErf(x),'l');
outlierPlot(y,L,mode="residual")
View(MetDataset)
View(MetDataset)
install.packages("VIM")
install.packages("devtools")
library(devtools)
install_github("riv","tomasgreif")
library(woe)
iv.mult(MetDataset,"gb",TRUE)
iv.mult(MetDataset,"flag_response_20140408",TRUE)
View(german_data)
var=varlist(german_data,"numeric")
var
View(MetDataset)
View(MetDataset)
iv.mult(german_data,y="gb",TRUE)
iv.mult(MetDataset,y="flag_response_20140408",TRUE)
View(MetDataset)
impute(MetDataset$flag_response_20140408)
?impute
install.packages("Hmisc")
impute(MetDataset$flag_response_20140408)
library(Hmiisc)
library(Hmisc)
impute(MetDataset$flag_response_20140408)
View(MetDataset)
View(MetDataset$flag_response_20140408)
iv.mult(MetDataset,y="flag_response_20140408",TRUE)
level(MetDataset$flag_response_20140408)
levels(MetDataset$flag_response_20140408)
summary(MetDataset$flag_response_20140408)
MetDataset$flag_response_20140408[1:100] =1
summary(MetDataset$flag_response_20140408)
levels(MetDataset$flag_response_20140408)
View(MetDataset$flag_response_20140408)
iv.mult(MetDataset,y="flag_response_20140408",TRUE)
x<-list(1,2,3,4,5)
y<-list(5.6.7.8.9)
y<-list(5,2,6,7,8,9,4)
x<-as.data.frame(x)
rapply(x,function(z) ifelse(z==y,print("hello"),print("bye")))
View(x)
y
c<-as.data.frame(y)
View(c)
s<-rapply(x,function(z) ifelse(z==y,print("hello"),print("bye")))
s<-rapply(c,function(z) ifelse(z==y,print("hello"),print("bye")))
s<-rapply(c,function(z) ifelse(z==y,print("hello")))
s<-apply(c,1,function(z) ifelse(z==y,print("hello"),print("bye")))
s<-rapply(x,function(z) ifelse(z==y,print("hello"),print("bye")))
View(y)
s<-rapply(x,function(z) ifelse(z==y,print("q"),print(z)))
s<-rapply(x,function(z) ifelse(y==z,print("q"),print(z)))
s<-rapply(c,function(z) ifelse(z==x,print("q"),print(z)))
c[1]
c[1] == x
s<-rapply(c,function(z) ifelse(z==x,print("q"),print(z)))
s<-rapply(c,function(z) ifelse(z %in% x,print("q"),print(z)))
s<-rapply(x,function(z) ifelse(z %in% x,print("q"),print(z)))
install.packages("swirl")
install.packages("KernSmooth")
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
cube <- function(x, n) {
+     x^3
+ }
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
library(datasets)
data(iris)
?iris
tapply(Sepal.Length, Species, mean)["virginica"]
mean(iris[iris$Species == "virginica",]$Sepal.Length)
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
quit
undebug(ls)
setwd("~/10.12.2014/Scripts")
setwd("~/GitHub/Coursera-R-Programming/specdata")
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
read.csv
read.csv("001.csv")
001<-read.csv("001.csv")
one<-read.csv("001.csv")
setwd("~/GitHub/Coursera-R-Programming/")
#getwd()
#list.files()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72) == 1.706
pollutantmean("specdata", "nitrate", 23)
setwd("~/GitHub/Coursera-R-Programming/")
#getwd()
#list.files()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean.vector <- c()
# find all files in the specdata folder
all.files <- as.character( list.files(directory) )
file.paths <- paste(directory, all.files, sep="")
for(i in id) {
current.file <- read.csv(file.paths[i], header=T, sep=",")
head(current.file)
pollutant
na.remove <- current.file[!is.na(current.file[, pollutant]), pollutant]
mean.vector <- c(mean.vector, na.removed)
}
result <- mean(mean.vector)
return(round(result, 3))
}
list.files()
pollutantmean("specdata", "nitrate", 70:72) == 1.706
setwd("~/GitHub/Coursera-R-Programming/")
#list.files()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean.vector <- c()
# find all files in the specdata folder
all.files <- as.character( list.files(directory) )
file.paths <- paste(directory, all.files, sep="")
for(i in id) {
current.file <- read.csv(file.paths[i], header=T, sep=",")
head(current.file)
pollutant
na.remove <- current.file[!is.na(current.file[, pollutant]), pollutant]
mean.vector <- c(mean.vector, na.remove)
}
result <- mean(mean.vector)
return(round(result, 3))
}
pollutantmean("specdata", "nitrate", 70:72) == 1.706
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
?do.call
getwd()
grep("specdata", directory) == 1
setwd("~/GitHub/Coursera-R-Programming/")
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
id.len <- length(id)
complete.data <- rep(0, id_len)
all.files <- as.character( list.files(directory) )
file.paths <- paste(directory, all.files, sep="")
j <- 1
for (i in id) {
current.file <- read.csv(file.paths[i], header=T, sep=",")
complete.data[j] <- sum(complete.cases(current.file))
j <- j + 1
}
result <- data.frame(id = id, nobs = complete.data)
return(result)
}
complete("specdata", 1)
##   id nobs
## 1  1  117
complete("specdata", c(2, 4, 8, 10, 12))
##   id nobs
## 1  2 1041
## 2  4  474
## 3  8  192
## 4 10  148
## 5 12   96
complete("specdata", 30:25)
##   id nobs
## 1 30  932
## 2 29  711
## 3 28  475
## 4 27  338
## 5 26  586
## 6 25  463
complete("specdata", 3)
##   id nobs
## 1  3  243
complete("specdata", 1)
##   id nobs
## 1  1  117
complete("specdata", c(2, 4, 8, 10, 12))
##   id nobs
## 1  2 1041
## 2  4  474
## 3  8  192
## 4 10  148
## 5 12   96
complete("specdata", 30:25)
##   id nobs
## 1 30  932
## 2 29  711
## 3 28  475
## 4 27  338
## 5 26  586
## 6 25  463
complete("specdata", 3)
##   id nobs
## 1  3  243
setwd("~/GitHub/Coursera-R-Programming/")
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
id.len <- length(id)
complete.data <- rep(0, id.len)
all.files <- as.character( list.files(directory) )
file.paths <- paste(directory, all.files, sep="")
j <- 1
for (i in id) {
current.file <- read.csv(file.paths[i], header=T, sep=",")
complete.data[j] <- sum(complete.cases(current.file))
j <- j + 1
}
result <- data.frame(id = id, nobs = complete.data)
return(result)
}
#Testing
complete("specdata", 1)
##   id nobs
## 1  1  117
complete("specdata", c(2, 4, 8, 10, 12))
##   id nobs
## 1  2 1041
## 2  4  474
## 3  8  192
## 4 10  148
## 5 12   96
complete("specdata", 30:25)
##   id nobs
## 1 30  932
## 2 29  711
## 3 28  475
## 4 27  338
## 5 26  586
## 6 25  463
complete("specdata", 3)
##   id nobs
## 1  3  243
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# get the complete table
complete.table <- complete("specdata", 1:332)
nobs <- complete.table$nobs
ids <- complete.table$id[nobs > threshold]
id.len <- length(ids)
corr.vector <- rep(0, id.len)
all.files <- as.character( list.files(directory) )
file.paths <- paste(directory, all.files, sep="")
j <- 1
for(i in ids) {
current.file <- read.csv(file.paths[i], header=T, sep=",")
corr.vector[j] <- cor(current.file$sulfate, current.file$nitrate, use="complete.obs")
j <- j + 1
}
result <- corr.vector
return(result)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
## -0.2110 -0.0500  0.0946  0.1250  0.2680  0.7630
cr <- corr("specdata", 400)
head(cr)
## [1] -0.01896 -0.04390 -0.06816 -0.07589  0.76313 -0.15783
summary(cr)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
## -0.1760 -0.0311  0.1000  0.1400  0.2680  0.7630
cr <- corr("specdata", 5000)
summary(cr)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
##
length(cr)
## [1] 0
cr <- corr("specdata")
summary(cr)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
## -1.0000 -0.0528  0.1070  0.1370  0.2780  1.0000
length(cr)
## [1] 323
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
